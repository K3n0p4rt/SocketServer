<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180716 16:59:10.560" generator="Robot 3.0.4 (Python 2.7.10 on darwin)">
<suite source="/Users/kenrickyap/Desktop/SocketServer/SimpleAppTest.robot" id="s1" name="SimpleAppTest">
<kw type="setup" name="Open Connection And Login">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=${SER_PORT}</arg>
<arg>alias=Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:10.749" starttime="20180716 16:59:10.749"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180716 16:59:10.750" level="INFO">Logging into 'localhost:4000' as 'root'.</msg>
<msg timestamp="20180716 16:59:11.961" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Mon Jul 16 08:52:39 2018 from 172.17.0.1
root@b61effe776c4:~#</msg>
<status status="PASS" endtime="20180716 16:59:11.962" starttime="20180716 16:59:10.749"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180716 16:59:11.974" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180716 16:59:11.975" starttime="20180716 16:59:11.962"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>g++ -std=c++11 -pthread server.cpp -o run_server</arg>
</arguments>
<msg timestamp="20180716 16:59:11.980" level="INFO">root@b61effe776c4:/git# g++ -std=c++11 -pthread server.cpp -o run_server</msg>
<status status="PASS" endtime="20180716 16:59:11.980" starttime="20180716 16:59:11.975"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=3000</arg>
<arg>alias=Client_1</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:11.981" starttime="20180716 16:59:11.981"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180716 16:59:11.982" level="INFO">Logging into 'localhost:3000' as 'root'.</msg>
<msg timestamp="20180716 16:59:13.102" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Mon Jul 16 08:52:40 2018 from 172.17.0.1
root@c6970c3f03f7:~#</msg>
<status status="PASS" endtime="20180716 16:59:13.103" starttime="20180716 16:59:11.981"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180716 16:59:13.123" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180716 16:59:13.124" starttime="20180716 16:59:13.103"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>g++ -std=c++11 -pthread client.cpp -o run_client</arg>
</arguments>
<msg timestamp="20180716 16:59:13.130" level="INFO">root@c6970c3f03f7:/git# g++ -std=c++11 -pthread client.cpp -o run_client</msg>
<status status="PASS" endtime="20180716 16:59:13.130" starttime="20180716 16:59:13.124"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=6000</arg>
<arg>alias=Client_2</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:13.131" starttime="20180716 16:59:13.131"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180716 16:59:13.132" level="INFO">Logging into 'localhost:6000' as 'root'.</msg>
<msg timestamp="20180716 16:59:14.247" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Mon Jul 16 08:52:42 2018 from 172.17.0.1
root@a6f06fd8065a:~#</msg>
<status status="PASS" endtime="20180716 16:59:14.248" starttime="20180716 16:59:13.132"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180716 16:59:14.255" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180716 16:59:14.256" starttime="20180716 16:59:14.248"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=5000</arg>
<arg>alias=Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:14.256" starttime="20180716 16:59:14.256"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180716 16:59:14.257" level="INFO">Logging into 'localhost:5000' as 'root'.</msg>
<msg timestamp="20180716 16:59:15.378" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Mon Jul 16 08:52:43 2018 from 172.17.0.1
root@08ea329edb2b:~#</msg>
<status status="PASS" endtime="20180716 16:59:15.378" starttime="20180716 16:59:14.257"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180716 16:59:15.388" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180716 16:59:15.388" starttime="20180716 16:59:15.378"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=2000</arg>
<arg>alias=Client_4</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:15.391" starttime="20180716 16:59:15.388"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180716 16:59:15.391" level="INFO">Logging into 'localhost:2000' as 'root'.</msg>
<msg timestamp="20180716 16:59:16.504" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Mon Jul 16 08:52:44 2018 from 172.17.0.1
root@46e0928a7de2:~#</msg>
<status status="PASS" endtime="20180716 16:59:16.504" starttime="20180716 16:59:15.391"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180716 16:59:16.512" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180716 16:59:16.512" starttime="20180716 16:59:16.505"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.512" starttime="20180716 16:59:10.748"></status>
</kw>
<test id="s1-t1" name="Start Server">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.514" starttime="20180716 16:59:16.514"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_server ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180716 16:59:16.515" level="INFO">server.cpp: In function 'void readAndWrite(int, int)':</msg>
<status status="PASS" endtime="20180716 16:59:16.515" starttime="20180716 16:59:16.514"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>...</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.527" level="INFO">server.cpp:56:2: error: 'cout' was not declared in this scope
  cout &lt;&lt; "Did close"
  ^
server.cpp:56:2: note: suggested alternative:
In file included from server.cpp:1:0:
/usr/include/c++/4.9/iostream:61:18: note:   'std::cout'
   extern ostream cout;  /// Linked to standard output
                  ^
server.cpp:57:18: error: 'i' was not declared in this scope
  for (int i = 0; i &lt; outsocks.size(); i++) {
                  ^
server.cpp: In function 'int main(int, char**)':
server.cpp:109:31: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR opening socket");
                               ^
server.cpp:121:26: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR on accept");
                          ^
root@b61effe776c4:/git# ./run_server 6969
Starting server...</msg>
<msg timestamp="20180716 16:59:16.527" level="INFO">${output} = server.cpp:56:2: error: 'cout' was not declared in this scope
  cout &lt;&lt; "Did close"
  ^
server.cpp:56:2: note: suggested alternative:
In file included from server.cpp:1:0:
/usr/include/c++/4.9/io...</msg>
<status status="PASS" endtime="20180716 16:59:16.528" starttime="20180716 16:59:16.516"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>Starting server...</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.528" starttime="20180716 16:59:16.528"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.529" critical="yes" starttime="20180716 16:59:16.513"></status>
</test>
<test id="s1-t2" name="Join With One Client">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.530" starttime="20180716 16:59:16.530"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180716 16:59:16.531" level="INFO">client.cpp: In function 'void writeLoop(int)':</msg>
<status status="PASS" endtime="20180716 16:59:16.531" starttime="20180716 16:59:16.530"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.532" starttime="20180716 16:59:16.531"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.544" level="INFO">New client joined</msg>
<msg timestamp="20180716 16:59:16.544" level="INFO">${output} = 
New client joined</msg>
<status status="PASS" endtime="20180716 16:59:16.544" starttime="20180716 16:59:16.533"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.545" starttime="20180716 16:59:16.544"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.545" critical="yes" starttime="20180716 16:59:16.529"></status>
</test>
<test id="s1-t3" name="Client Join Till Server Capacity">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.546" starttime="20180716 16:59:16.546"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180716 16:59:16.558" level="INFO">root@a6f06fd8065a:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180716 16:59:16.559" starttime="20180716 16:59:16.546"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.560" starttime="20180716 16:59:16.559"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.560" level="INFO">New client joined</msg>
<msg timestamp="20180716 16:59:16.561" level="INFO">${output} = 
New client joined</msg>
<status status="PASS" endtime="20180716 16:59:16.561" starttime="20180716 16:59:16.560"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.561" starttime="20180716 16:59:16.561"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.562" starttime="20180716 16:59:16.562"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180716 16:59:16.573" level="INFO">root@08ea329edb2b:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180716 16:59:16.573" starttime="20180716 16:59:16.562"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.574" starttime="20180716 16:59:16.573"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.574" level="INFO">New client joined</msg>
<msg timestamp="20180716 16:59:16.574" level="INFO">${output} = 
New client joined</msg>
<status status="PASS" endtime="20180716 16:59:16.574" starttime="20180716 16:59:16.574"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.575" starttime="20180716 16:59:16.575"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.575" critical="yes" starttime="20180716 16:59:16.545"></status>
</test>
<test id="s1-t4" name="Client Join At Max Server Capacity">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_4</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.576" starttime="20180716 16:59:16.576"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180716 16:59:16.583" level="INFO">root@46e0928a7de2:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180716 16:59:16.583" starttime="20180716 16:59:16.576"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>later</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.588" level="INFO">Server full. Please try agian later</msg>
<msg timestamp="20180716 16:59:16.588" level="INFO">${output} = Server full. Please try agian later</msg>
<status status="PASS" endtime="20180716 16:59:16.588" starttime="20180716 16:59:16.583"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server full. Please try agian later</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.589" starttime="20180716 16:59:16.588"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.589" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.605" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180716 16:59:16.606" starttime="20180716 16:59:16.589"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.606" critical="yes" starttime="20180716 16:59:16.576"></status>
</test>
<test id="s1-t5" name="Client Leave and Join">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.608" starttime="20180716 16:59:16.608"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.608" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.625" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180716 16:59:16.626" starttime="20180716 16:59:16.608"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180716 16:59:16.627" level="INFO">Terminated</msg>
<status status="PASS" endtime="20180716 16:59:16.627" starttime="20180716 16:59:16.626"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.628" starttime="20180716 16:59:16.627"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.636" level="INFO">New client joined</msg>
<msg timestamp="20180716 16:59:16.636" level="INFO">${output} = 
New client joined</msg>
<status status="PASS" endtime="20180716 16:59:16.636" starttime="20180716 16:59:16.629"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.637" starttime="20180716 16:59:16.637"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.637" critical="yes" starttime="20180716 16:59:16.607"></status>
</test>
<test id="s1-t6" name="Send And Recieve Message (Client_3)">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.638" starttime="20180716 16:59:16.638"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>howdy!</arg>
</arguments>
<msg timestamp="20180716 16:59:16.640" level="INFO">root@08ea329edb2b:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180716 16:59:16.640" starttime="20180716 16:59:16.638"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.642" starttime="20180716 16:59:16.641"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>!</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.644" level="INFO">Here is the message: howdy!</msg>
<msg timestamp="20180716 16:59:16.645" level="INFO">${output} = 
Here is the message: howdy!</msg>
<status status="PASS" endtime="20180716 16:59:16.645" starttime="20180716 16:59:16.643"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>howdy!</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.646" starttime="20180716 16:59:16.645"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.647" starttime="20180716 16:59:16.647"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>!</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.648" level="INFO">howdy!</msg>
<msg timestamp="20180716 16:59:16.648" level="INFO">${output} = howdy!</msg>
<status status="PASS" endtime="20180716 16:59:16.648" starttime="20180716 16:59:16.648"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>howdy!</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.649" starttime="20180716 16:59:16.648"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.649" starttime="20180716 16:59:16.649"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>!</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.659" level="INFO">client.cpp:34:42: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
    error("ERROR writing to socket",sockfd);
                                          ^
client.cpp: In function 'void readLoop(int)':
client.cpp:49:44: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
    error("ERROR reading from socket",sockfd);
                                            ^
client.cpp: In function 'int main(int, char**)':
client.cpp:75:31: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR opening socket");
                               ^
client.cpp:80:30: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR: no such host");
                              ^
client.cpp:93:27: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR connecting");
                           ^
root@c6970c3f03f7:/git# ./run_client 172.17.0.6 6969
howdy!</msg>
<msg timestamp="20180716 16:59:16.659" level="INFO">${output} = client.cpp:34:42: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
    error("ERROR writing to socket",sockfd);
                                          ^
client.cp...</msg>
<status status="PASS" endtime="20180716 16:59:16.660" starttime="20180716 16:59:16.650"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>howdy!</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.660" starttime="20180716 16:59:16.660"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.660" critical="yes" starttime="20180716 16:59:16.637"></status>
</test>
<test id="s1-t7" name="Send And Recieve Message (Client_1)">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.662" starttime="20180716 16:59:16.662"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>I am here</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.663" starttime="20180716 16:59:16.663"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.664" starttime="20180716 16:59:16.663"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>here</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.667" level="INFO">howdy!
I am here</msg>
<msg timestamp="20180716 16:59:16.667" level="INFO">${output} = howdy!
I am here</msg>
<status status="PASS" endtime="20180716 16:59:16.667" starttime="20180716 16:59:16.664"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>I am here</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.668" starttime="20180716 16:59:16.668"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.669" starttime="20180716 16:59:16.668"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>here</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.669" level="INFO">I am here</msg>
<msg timestamp="20180716 16:59:16.669" level="INFO">${output} = 

I am here</msg>
<status status="PASS" endtime="20180716 16:59:16.669" starttime="20180716 16:59:16.669"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>I am here</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.670" starttime="20180716 16:59:16.670"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.670" critical="yes" starttime="20180716 16:59:16.661"></status>
</test>
<test id="s1-t8" name="Send And Recieve Message (Client_2)">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.672" starttime="20180716 16:59:16.672"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cry ;(</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.673" starttime="20180716 16:59:16.672"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.674" starttime="20180716 16:59:16.674"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>;(</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.677" level="INFO">I am here
cry ;(</msg>
<msg timestamp="20180716 16:59:16.677" level="INFO">${output} = 
I am here
cry ;(</msg>
<status status="PASS" endtime="20180716 16:59:16.677" starttime="20180716 16:59:16.675"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>cry ;(</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.678" starttime="20180716 16:59:16.677"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.678" starttime="20180716 16:59:16.678"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>;(</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180716 16:59:16.679" level="INFO">cry ;(</msg>
<msg timestamp="20180716 16:59:16.679" level="INFO">${output} = 

cry ;(</msg>
<status status="PASS" endtime="20180716 16:59:16.679" starttime="20180716 16:59:16.678"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>cry ;(</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.679" starttime="20180716 16:59:16.679"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:16.679" critical="yes" starttime="20180716 16:59:16.671"></status>
</test>
<kw type="teardown" name="Shutdown Application And Close All Connections">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_4</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.681" starttime="20180716 16:59:16.680"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.681" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.695" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20180716 16:59:16.695" starttime="20180716 16:59:16.681"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.696" starttime="20180716 16:59:16.696"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.696" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.710" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180716 16:59:16.710" starttime="20180716 16:59:16.696"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.710" starttime="20180716 16:59:16.710"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.711" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.726" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180716 16:59:16.727" starttime="20180716 16:59:16.711"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.727" starttime="20180716 16:59:16.727"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.728" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.744" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180716 16:59:16.745" starttime="20180716 16:59:16.728"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180716 16:59:16.746" starttime="20180716 16:59:16.745"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180716 16:59:16.746" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180716 16:59:16.766" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180716 16:59:16.766" starttime="20180716 16:59:16.746"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20180716 16:59:17.158" starttime="20180716 16:59:16.767"></status>
</kw>
<status status="PASS" endtime="20180716 16:59:17.159" starttime="20180716 16:59:16.680"></status>
</kw>
<doc>This example demonstrates executing commands on a remote machine
and getting their output and the return code.
http://robotframework.org/SSHLibrary/SSHLibrary.html#Read
Notice how connections are handled as part of the suite setup and
teardown. This saves some time when executing several test cases.</doc>
<status status="PASS" endtime="20180716 16:59:17.159" starttime="20180716 16:59:10.563"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="8">Critical Tests</stat>
<stat fail="0" pass="8">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="SimpleAppTest" pass="8">SimpleAppTest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
