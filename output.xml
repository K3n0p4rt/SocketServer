<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180717 15:35:23.588" generator="Robot 3.0.4 (Python 2.7.10 on darwin)">
<suite source="/Users/kenrickyap/Desktop/SocketServer/SimpleAppTest.robot" id="s1" name="SimpleAppTest">
<kw type="setup" name="Open Connection And Login And Compile">
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=${SER_PORT}</arg>
<arg>alias=Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:23.769" starttime="20180717 15:35:23.768"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180717 15:35:23.769" level="INFO">Logging into 'localhost:4000' as 'root'.</msg>
<msg timestamp="20180717 15:35:24.979" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Tue Jul 17 07:33:03 2018 from 172.17.0.1
root@b61effe776c4:~#</msg>
<status status="PASS" endtime="20180717 15:35:24.980" starttime="20180717 15:35:23.769"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180717 15:35:24.986" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180717 15:35:24.986" starttime="20180717 15:35:24.980"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>g++ -std=c++11 -pthread server.cpp -o run_server</arg>
</arguments>
<msg timestamp="20180717 15:35:24.991" level="INFO">root@b61effe776c4:/git# g++ -std=c++11 -pthread server.cpp -o run_server</msg>
<status status="PASS" endtime="20180717 15:35:24.992" starttime="20180717 15:35:24.986"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=3000</arg>
<arg>alias=Client_1</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:24.992" starttime="20180717 15:35:24.992"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180717 15:35:24.993" level="INFO">Logging into 'localhost:3000' as 'root'.</msg>
<msg timestamp="20180717 15:35:26.107" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Tue Jul 17 07:33:04 2018 from 172.17.0.1
root@c6970c3f03f7:~#</msg>
<status status="PASS" endtime="20180717 15:35:26.108" starttime="20180717 15:35:24.993"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180717 15:35:26.113" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180717 15:35:26.114" starttime="20180717 15:35:26.108"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>g++ -std=c++11 -pthread client.cpp -o run_client</arg>
</arguments>
<msg timestamp="20180717 15:35:26.127" level="INFO">root@c6970c3f03f7:/git# g++ -std=c++11 -pthread client.cpp -o run_client</msg>
<status status="PASS" endtime="20180717 15:35:26.128" starttime="20180717 15:35:26.114"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=6000</arg>
<arg>alias=Client_2</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:26.128" starttime="20180717 15:35:26.128"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180717 15:35:26.129" level="INFO">Logging into 'localhost:6000' as 'root'.</msg>
<msg timestamp="20180717 15:35:27.262" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Tue Jul 17 07:33:05 2018 from 172.17.0.1
root@a6f06fd8065a:~#</msg>
<status status="PASS" endtime="20180717 15:35:27.263" starttime="20180717 15:35:26.128"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180717 15:35:27.267" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180717 15:35:27.268" starttime="20180717 15:35:27.263"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=5000</arg>
<arg>alias=Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:27.269" starttime="20180717 15:35:27.268"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180717 15:35:27.269" level="INFO">Logging into 'localhost:5000' as 'root'.</msg>
<msg timestamp="20180717 15:35:28.388" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Tue Jul 17 07:33:06 2018 from 172.17.0.1
root@08ea329edb2b:~#</msg>
<status status="PASS" endtime="20180717 15:35:28.389" starttime="20180717 15:35:27.269"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180717 15:35:28.395" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180717 15:35:28.395" starttime="20180717 15:35:28.389"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${HOST}</arg>
<arg>port=2000</arg>
<arg>alias=Client_4</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:28.398" starttime="20180717 15:35:28.395"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${USERNAME}</arg>
<arg>${PASSWORD}</arg>
</arguments>
<msg timestamp="20180717 15:35:28.398" level="INFO">Logging into 'localhost:2000' as 'root'.</msg>
<msg timestamp="20180717 15:35:29.523" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.9.87-linuxkit-aufs x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage
Last login: Tue Jul 17 07:33:07 2018 from 172.17.0.1
root@46e0928a7de2:~#</msg>
<status status="PASS" endtime="20180717 15:35:29.523" starttime="20180717 15:35:28.398"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cd /git</arg>
</arguments>
<msg timestamp="20180717 15:35:29.535" level="INFO">cd /git</msg>
<status status="PASS" endtime="20180717 15:35:29.535" starttime="20180717 15:35:29.524"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.535" starttime="20180717 15:35:23.768"></status>
</kw>
<test id="s1-t1" name="Start Server">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.537" starttime="20180717 15:35:29.536"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_server ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180717 15:35:29.538" level="INFO">server.cpp: In function 'int main(int, char**)':</msg>
<status status="PASS" endtime="20180717 15:35:29.538" starttime="20180717 15:35:29.537"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>...</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.547" level="INFO">server.cpp:122:36: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR: no port provided\n");
                                    ^
server.cpp:129:31: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR opening socket");
                               ^
server.cpp:141:26: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR on accept");
                          ^
root@b61effe776c4:/git# ./run_server 6969
Starting server...</msg>
<msg timestamp="20180717 15:35:29.547" level="INFO">${output} = server.cpp:122:36: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR: no port provided\n");
                                    ^
server.cpp:129:31: w...</msg>
<status status="PASS" endtime="20180717 15:35:29.547" starttime="20180717 15:35:29.539"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>Starting server...</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.548" starttime="20180717 15:35:29.547"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.548" critical="yes" starttime="20180717 15:35:29.535"></status>
</test>
<test id="s1-t2" name="Join With One Client">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.549" starttime="20180717 15:35:29.549"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180717 15:35:29.551" level="INFO">client.cpp: In function 'int main(int, char**)':</msg>
<status status="PASS" endtime="20180717 15:35:29.551" starttime="20180717 15:35:29.549"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.552" starttime="20180717 15:35:29.551"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.560" level="INFO">140110831089408 thread started
New client joined</msg>
<msg timestamp="20180717 15:35:29.561" level="INFO">${output} = 
140110831089408 thread started
New client joined</msg>
<status status="PASS" endtime="20180717 15:35:29.561" starttime="20180717 15:35:29.553"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.562" starttime="20180717 15:35:29.561"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.562" critical="yes" starttime="20180717 15:35:29.548"></status>
</test>
<test id="s1-t3" name="Client Join Till Server Capacity">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.563" starttime="20180717 15:35:29.563"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180717 15:35:29.570" level="INFO">root@a6f06fd8065a:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180717 15:35:29.570" starttime="20180717 15:35:29.563"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.572" starttime="20180717 15:35:29.571"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.574" level="INFO">140110822696704 thread started
New client joined</msg>
<msg timestamp="20180717 15:35:29.575" level="INFO">${output} = 
140110822696704 thread started
New client joined</msg>
<status status="PASS" endtime="20180717 15:35:29.575" starttime="20180717 15:35:29.573"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.576" starttime="20180717 15:35:29.575"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.576" starttime="20180717 15:35:29.576"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180717 15:35:29.582" level="INFO">root@08ea329edb2b:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180717 15:35:29.582" starttime="20180717 15:35:29.576"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.582" starttime="20180717 15:35:29.582"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.587" level="INFO">140110814304000 thread started
New client joined</msg>
<msg timestamp="20180717 15:35:29.587" level="INFO">${output} = 
140110814304000 thread started
New client joined</msg>
<status status="PASS" endtime="20180717 15:35:29.587" starttime="20180717 15:35:29.582"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.588" starttime="20180717 15:35:29.588"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.588" critical="yes" starttime="20180717 15:35:29.562"></status>
</test>
<test id="s1-t4" name="Client Join At Max Server Capacity">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_4</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.589" starttime="20180717 15:35:29.589"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180717 15:35:29.593" level="INFO">root@46e0928a7de2:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180717 15:35:29.593" starttime="20180717 15:35:29.590"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>later</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.598" level="INFO">Server full. Please try agian later</msg>
<msg timestamp="20180717 15:35:29.598" level="INFO">${output} = Server full. Please try agian later</msg>
<status status="PASS" endtime="20180717 15:35:29.599" starttime="20180717 15:35:29.593"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>Server full. Please try agian later</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.599" starttime="20180717 15:35:29.599"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.600" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.614" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180717 15:35:29.614" starttime="20180717 15:35:29.600"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.614" critical="yes" starttime="20180717 15:35:29.589"></status>
</test>
<test id="s1-t5" name="Client Leave and Join">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.616" starttime="20180717 15:35:29.616"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.617" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.634" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180717 15:35:29.635" starttime="20180717 15:35:29.617"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>./run_client ${IP_ADD} ${VIR_PORT}</arg>
</arguments>
<msg timestamp="20180717 15:35:29.636" level="INFO">Terminated</msg>
<status status="PASS" endtime="20180717 15:35:29.637" starttime="20180717 15:35:29.635"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.638" starttime="20180717 15:35:29.637"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>joined</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.646" level="INFO">140110805911296 thread started
Did close
Did close
140110797518592 thread started
New client joined</msg>
<msg timestamp="20180717 15:35:29.646" level="INFO">${output} = 
140110805911296 thread started
Did close
Did close
140110797518592 thread started
New client joined</msg>
<status status="PASS" endtime="20180717 15:35:29.646" starttime="20180717 15:35:29.639"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>New client joined</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.646" starttime="20180717 15:35:29.646"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.647" critical="yes" starttime="20180717 15:35:29.615"></status>
</test>
<test id="s1-t6" name="Send And Recieve Message (Client_3)">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.648" starttime="20180717 15:35:29.648"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>howdy!</arg>
</arguments>
<msg timestamp="20180717 15:35:29.650" level="INFO">root@08ea329edb2b:/git# ./run_client 172.17.0.6 6969</msg>
<status status="PASS" endtime="20180717 15:35:29.650" starttime="20180717 15:35:29.648"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.652" starttime="20180717 15:35:29.652"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>!</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.653" level="INFO">Here is the message: howdy!</msg>
<msg timestamp="20180717 15:35:29.653" level="INFO">${output} = 
Here is the message: howdy!</msg>
<status status="PASS" endtime="20180717 15:35:29.654" starttime="20180717 15:35:29.653"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>howdy!</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.654" starttime="20180717 15:35:29.654"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.655" starttime="20180717 15:35:29.654"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>!</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.655" level="INFO">howdy!</msg>
<msg timestamp="20180717 15:35:29.656" level="INFO">${output} = howdy!</msg>
<status status="PASS" endtime="20180717 15:35:29.656" starttime="20180717 15:35:29.655"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>howdy!</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.657" starttime="20180717 15:35:29.656"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.657" starttime="20180717 15:35:29.657"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>!</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.664" level="INFO">client.cpp:81:31: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR opening socket");
                               ^
client.cpp:86:30: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR: no such host");
                              ^
client.cpp:99:27: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR connecting");
                           ^
root@c6970c3f03f7:/git# ./run_client 172.17.0.6 6969
howdy!</msg>
<msg timestamp="20180717 15:35:29.664" level="INFO">${output} = client.cpp:81:31: warning: deprecated conversion from string constant to 'char*' [-Wwrite-strings]
   error("ERROR opening socket");
                               ^
client.cpp:86:30: warning: depr...</msg>
<status status="PASS" endtime="20180717 15:35:29.664" starttime="20180717 15:35:29.658"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>howdy!</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.665" starttime="20180717 15:35:29.664"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.665" critical="yes" starttime="20180717 15:35:29.647"></status>
</test>
<test id="s1-t7" name="Send And Recieve Message (Client_1)">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.666" starttime="20180717 15:35:29.666"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>I am here</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.667" starttime="20180717 15:35:29.666"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.668" starttime="20180717 15:35:29.667"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>here</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.672" level="INFO">howdy!
I am here</msg>
<msg timestamp="20180717 15:35:29.672" level="INFO">${output} = howdy!
I am here</msg>
<status status="PASS" endtime="20180717 15:35:29.672" starttime="20180717 15:35:29.669"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>I am here</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.673" starttime="20180717 15:35:29.672"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.674" starttime="20180717 15:35:29.673"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>here</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.674" level="INFO">I am here</msg>
<msg timestamp="20180717 15:35:29.674" level="INFO">${output} = 
I am here</msg>
<status status="PASS" endtime="20180717 15:35:29.675" starttime="20180717 15:35:29.674"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>I am here</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.675" starttime="20180717 15:35:29.675"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.675" critical="yes" starttime="20180717 15:35:29.665"></status>
</test>
<test id="s1-t8" name="Send And Recieve Message (Client_2)">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.677" starttime="20180717 15:35:29.676"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>cry ;(</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.678" starttime="20180717 15:35:29.677"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.678" starttime="20180717 15:35:29.678"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>;(</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.681" level="INFO">I am here
cry ;(</msg>
<msg timestamp="20180717 15:35:29.681" level="INFO">${output} = I am here
cry ;(</msg>
<status status="PASS" endtime="20180717 15:35:29.681" starttime="20180717 15:35:29.680"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>cry ;(</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.682" starttime="20180717 15:35:29.681"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.682" starttime="20180717 15:35:29.682"></status>
</kw>
<kw name="Read Until" library="SSHLibrary">
<doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
<arguments>
<arg>;(</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20180717 15:35:29.683" level="INFO">cry ;(</msg>
<msg timestamp="20180717 15:35:29.683" level="INFO">${output} = 
cry ;(</msg>
<status status="PASS" endtime="20180717 15:35:29.683" starttime="20180717 15:35:29.682"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${output}</arg>
<arg>cry ;(</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.683" starttime="20180717 15:35:29.683"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.684" critical="yes" starttime="20180717 15:35:29.676"></status>
</test>
<kw type="teardown" name="Shutdown Application And Close All Connections">
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_4</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.685" starttime="20180717 15:35:29.685"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.685" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.700" level="INFO">Command exited with return code 1.</msg>
<status status="PASS" endtime="20180717 15:35:29.701" starttime="20180717 15:35:29.685"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_3</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.701" starttime="20180717 15:35:29.701"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.702" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.716" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180717 15:35:29.716" starttime="20180717 15:35:29.702"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_2</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.717" starttime="20180717 15:35:29.717"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.717" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.733" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180717 15:35:29.734" starttime="20180717 15:35:29.717"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Client_1</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.734" starttime="20180717 15:35:29.734"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.735" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.752" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180717 15:35:29.752" starttime="20180717 15:35:29.735"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>Server</arg>
</arguments>
<status status="PASS" endtime="20180717 15:35:29.753" starttime="20180717 15:35:29.752"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>pkill -15 run</arg>
</arguments>
<msg timestamp="20180717 15:35:29.753" level="INFO">Executing command 'pkill -15 run'.</msg>
<msg timestamp="20180717 15:35:29.786" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20180717 15:35:29.786" starttime="20180717 15:35:29.753"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20180717 15:35:29.993" starttime="20180717 15:35:29.786"></status>
</kw>
<status status="PASS" endtime="20180717 15:35:29.993" starttime="20180717 15:35:29.684"></status>
</kw>
<doc>This example demonstrates executing commands on a remote machine
and getting their output and the return code.
http://robotframework.org/SSHLibrary/SSHLibrary.html#Read
Notice how connections are handled as part of the suite setup and
teardown. This saves some time when executing several test cases.</doc>
<status status="PASS" endtime="20180717 15:35:29.993" starttime="20180717 15:35:23.591"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="8">Critical Tests</stat>
<stat fail="0" pass="8">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="SimpleAppTest" pass="8">SimpleAppTest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
